# List of stages (jobs on the same stage run in parallel). Unused stages are ignored.
# See https://docs.gitlab.com/ee/ci/yaml/#stages
stages:
  - build
  - test
  - deploy

# Set some environment variables based on Gitlab-specific variables
# See https://docs.gitlab.com/ee/ci/variables/
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PRE_COMMIT_HOME: "$CI_PROJECT_DIR/.cache/pre-commit"

# Generate documentation and expose as Gitlab job artifact, so that it can be downloaded.
# (If Gitlab pages is enabled on the instance, better serve the documentation there!)
# See https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html#access-the-latest-job-artifacts-by-url
make-docs:
  image: python:latest
  stage: deploy
  cache: {}
  script:
    - pip install pdoc anybadge
    - pdoc -o docs python_app_template
    - anybadge -l download -v docs > docs-badge.svg
  artifacts:
    paths:
      - docs/
      - docs-badge.svg

# Run pre-commit, just to make sure the developers did not mess up.
# It uses its own cache for its isolated environments (location: PRE_COMMIT_HOME).
run-pre-commit:
  image: python:latest
  stage: test
  variables:
  cache:
    key:
      files:
        - .pre-commit-config.yaml
      prefix: $CI_JOB_NAME
    paths:
      - .cache
  script:
    - pip install pre-commit
    - pre-commit run --all-files

# Global cache settings for test jobs (each job by default uses own copy of these settings)
# If key files do not change, restore the listed paths from cache (if cached).
# At the end, store those directories in cache.
# See https://docs.gitlab.com/ee/ci/caching/
cache: &global_cache
  key:
    files:
      - poetry.lock
    prefix: $CI_JOB_NAME
  paths:
    - .cache
    - .venv
    - .tox
    - .poetry
  policy: pull-push

# Setup environment with all required tools.
# Defined as hidden job (starting with dot) + YAML anchor (for referencing)
# See https://docs.gitlab.com/ee/ci/yaml/#anchors
.prepare-env-template: &prepare-env
  before_script:
    - curl https://bootstrap.pypa.io/get-pip.py | python3
    - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3
    - source $HOME/.poetry/env
    - poetry --version
    - poetry config virtualenvs.in-project true
    - poetry install --no-root

# Run the tests with multiple Python interpreters with tox.
run-pytest-tox:
  image: fkrull/multi-python:latest
  stage: test
  <<: *prepare-env
  script:
    - poetry run tox

# Instead of using tox we can also run with multiple containers,
# based on the same job template.

# Job template. Just add an image with specific Python interpreter for an instance.
.run-pytest-template: &run-pytest
  stage: test
  <<: *prepare-env
  script:
    - poetry run pytest --cov --junitxml=report.xml
  # for Gitlab integration of test results
  artifacts:
    when: always
    reports:
      junit: report.xml

run-pytest-3.7:
  image: python:3.7
  <<: *run-pytest

run-pytest-3.8:
  image: python:3.8
  <<: *run-pytest

run-pytest-3.9:
  image: python:3.9
  <<: *run-pytest
